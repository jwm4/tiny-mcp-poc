# weather_mcp_server.py
# Generated by Google Gemini
# Enhanced with HTTP server support for remote testing

from typing import Any
import httpx
from fastmcp import FastMCP
import asyncio
import os
import argparse

# Initialize FastMCP server
# The name "weather" is how this server will be identified by clients
mcp = FastMCP("weather")

# Constants for a hypothetical weather API (e.g., Open-Meteo for simplicity, no API key needed for basic usage)
# In a real scenario, you'd use a more robust weather API with authentication.
WEATHER_API_BASE = "https://api.open-meteo.com/v1"
USER_AGENT = "openai-mcp-demo/1.0 (contact@example.com)" # Good practice for API requests

@mcp.tool()
async def get_current_weather(latitude: float, longitude: float) -> str:
    """
    Get the current weather for a given geographical coordinate.
    Latitude and longitude should be provided as floating-point numbers.
    """
    try:
        url = f"{WEATHER_API_BASE}/forecast?latitude={latitude}&longitude={longitude}&current_weather=true&temperature_unit=fahrenheit"
        headers = {"User-Agent": USER_AGENT}

        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status() # Raise an exception for HTTP errors
            data = response.json()

        if "current_weather" in data:
            weather = data["current_weather"]
            temperature = weather["temperature"]
            windspeed = weather["windspeed"]
            winddirection = weather["winddirection"]
            return (f"Current weather at {latitude}¬∞N, {longitude}¬∞E: "
                    f"Temperature: {temperature}¬∞F, "
                    f"Wind: {windspeed} km/h from {winddirection}¬∞.")
        else:
            return f"Could not retrieve weather data for {latitude}¬∞N, {longitude}¬∞E."

    except httpx.HTTPStatusError as e:
        return f"HTTP error occurred: {e.response.status_code} - {e.response.text}"
    except httpx.RequestError as e:
        return f"Request error occurred: {e}"
    except Exception as e:
        return f"An unexpected error occurred: {e}"

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Weather MCP Server - Provides weather information via MCP protocol",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Transport modes:
  stdio: Communication via stdin/stdout (default) - for local MCP clients
  sse:   Server-Sent Events HTTP server mode - for remote MCP clients

Examples:
  python weather_mcp_server.py                    # Run with stdio (default)
  python weather_mcp_server.py --transport stdio  # Explicit stdio mode
  python weather_mcp_server.py --transport sse    # SSE HTTP server mode
  python weather_mcp_server.py --transport sse --port 8080  # Custom port
  python weather_mcp_server.py --transport sse --host 0.0.0.0  # Bind to all interfaces
        """
    )
    
    parser.add_argument(
        "--transport", "-t",
        choices=["stdio", "sse"],
        default="stdio",
        help="Transport mode: stdio (default) or sse (HTTP-based)"
    )
    
    parser.add_argument(
        "--host",
        default="localhost", 
        help="Host to bind to in HTTP mode (default: localhost)"
    )
    
    parser.add_argument(
        "--port", "-p",
        type=int,
        default=3000,
        help="Port to bind to in HTTP mode (default: 3000)"
    )
    
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_arguments()
    
    print("Starting MCP Weather Server...")
    print("Available tools:")
    print("- get_current_weather: Get current weather for latitude/longitude coordinates")
    
    if args.transport == "stdio":
        print(f"\nüîó Transport: STDIO")
        print("This server communicates via stdin/stdout.")
        print("Connect to it using an MCP client running as a subprocess.")
        print("\nExample usage from weather_agent.py:")
        print('  Agent(server_spec="weather_mcp_server.py")')
        
        # Using 'stdio' transport for local communication with a client running as a subprocess
        mcp.run(transport='stdio')
        
    elif args.transport == "sse":
        print(f"\nüåê Transport: SSE (HTTP-based)")
        print(f"Server will be available at: http://{args.host}:{args.port}")
        print("Connect to it using a remote MCP client.")
        print(f"\nExample usage from weather_agent.py:")
        print(f'  Agent(server_spec="remote:http://{args.host}:{args.port}")')
        print("\nExample test commands:")
        print(f"  # Test the remote server")
        print(f"  python openai_mcp_agent.py --server remote:http://{args.host}:{args.port}")
        print("\nüöÄ Starting SSE server...")
        
        # Using 'sse' transport for remote communication
        # The newer FastMCP library supports host and port parameters
        try:
            mcp.run(transport='sse', host=args.host, port=args.port)
        except Exception as e:
            print(f"Error starting SSE server: {e}")
            if "address already in use" in str(e).lower() or "errno 48" in str(e).lower():
                print(f"\nüí° Port {args.port} is already in use. Try:")
                print(f"  1. Check what's using port {args.port}: lsof -i :{args.port}")
                print("  2. Kill the existing process: kill <PID>")
                print("  3. Try a different port: python weather_mcp_server.py --transport sse --port <different_port>")
                print("  4. Or use stdio mode: python weather_mcp_server.py --transport stdio")
            else:
                print("Please check the error message above and try again.")
    
    print("\nServer stopped.")